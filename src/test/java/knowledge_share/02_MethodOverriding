Questions
=========
1. What is method overriding in Java?
Answer: Method overriding in Java allows a subclass to provide a specific implementation for
a method that is already defined in its superclass.

2. What are the rules for method overriding in Java?
Answer:
1. The method in the subclass must have the same signature as the method in the superclass.
2. The method in the subclass must have the same return type (or a subtype).
3. The access level of the overriding method cannot be more restrictive than the overridden method.
4. The overriding method cannot throw broader exceptions than the overridden method.

3. Can the overridden method be private or static?
Answer: No, the overridden method cannot be private or static. It must be visible to the subclass
and not marked as static.

4. Why is the @Override annotation used for in method overriding?
Answer: The @Override annotation is used to indicate that a method in a subclass is intended to
override a method in its superclass. It helps the compiler catch errors if the method does not
actually override a method in the superclass.

5. Explain the difference between method overloading and method overriding.
Answer: Method overloading involves defining multiple methods in the same class with the same
name but different parameter lists. Method overriding involves providing a specific implementation
for a method that is already defined in a superclass.

6. What is the significance of the super keyword in method overriding?
Answer: The super keyword is used to call the overridden method from the superclass. It is
particularly useful when the subclass wants to extend or modify the behavior of the superclass
method.

7. Can a subclass override a private method in its superclass?
Answer: No, a subclass cannot override a private method in its superclass because private methods
are not visible to subclasses.

8. How does method overriding support polymorphism in Java?
Answer: Method overriding allows different classes to provide a specific implementation of a method
defined in a common superclass. This enables polymorphic behavior, where objects of different classes
can be treated as objects of a common superclass.

9. What is covariant return type in method overriding?
Answer: Covariant return type allows a subclass method to have a return type that is a subtype of
the return type of the overridden method in the superclass. This feature was introduced in Java 5.
Covariant return types only apply to non-primitive types.

10. Explain the concept of dynamic method dispatch in method overriding.
Answer: Dynamic method dispatch refers to the process where the appropriate overridden method is
called at runtime, based on the actual type of the object rather than the reference type. It is a
key feature that enables polymorphism in Java.

11. What are the conditions required for method overriding?
Answer: Same method name, inheritance hierarchy, non-static methods, not private methods.

12. Can you override a static method? Why or why not?
Answer: No, static methods are bound at compile time.

Method Overriding vs. Static Binding:
=====================================
Method Overriding: Relies on dynamic binding. This means the specific method to be called is
determined at runtime based on the actual object type. It's a core concept of polymorphism,
allowing subclasses to provide specialized implementations of inherited methods.

Static Binding: In contrast, static methods are resolved at compile time. The compiler
determines the exact method to call based on the declared type of the reference variable, not
the actual object. This is because static methods belong to the class itself, not to instances.

Reasons Why Overriding Static Methods is Not Allowed:
=====================================================
Compile-time Resolution: Since static methods are resolved at compile time, there's no chance
for runtime polymorphism to occur. The compiler already knows which static method to call based
on the reference type.

No Inheritance for Static Methods: Static methods are not inherited by subclasses in the traditional
sense. They are associated with the class itself and can be accessed directly using the class name.

Logic of Static Methods: Static methods are often used for utility functions or class-level operations
that don't depend on specific object states. Overriding wouldn't make sense in this context.

13. What happens if you change the return type of the overriding method?
Answer: Not allowed, return type must be same or covariant.

14. Can you override private methods? Explain.
Answer: No, private methods are not inherited

15. How can you call the superclass version of the overridden method from the subclass?
Answer: Using the super keyword. The super() keyword is used to invoke the overridden method in
the superclass. It is particularly useful when the subclass wants to extend or modify the behavior
of the superclass method but still wants to execute the overridden method's functionality.

16. What are the access modifiers' behavior during method overriding? / Can you override a method
and change its access level (e.g., from protected to private) in the subclass?
Answer: No, the access level of the overriding method cannot be more restrictive than the overridden
method. In other words, you cannot reduce the visibility of the method in the subclass.

17. Can you throw a checked exception in the overriding method that wasn't declared in
the superclass method?
Answer: No, only allowed to throw unchecked exceptions or the same or narrower checked exceptions.

18. Explain the concept of method overriding in the context of the Object class in Java?
Answer: E.g., equals(), hashCode(), toString() methods.

19. What is Method Hiding?
Answer: While you can't override static methods, you can create a method in the subclass with
the same name and signature as a static method in the superclass. This results in method hiding.
When you call the method using a reference variable of the subclass, the subclass method will
be invoked, effectively hiding the superclass static method.

class Parent {
  public static void printMessage() {
    System.out.println("Static method from Parent");
  }
}

class Child extends Parent {
  // This hides the static method from Parent
  public static void printMessage() {
    System.out.println("Static method from Child");
  }
}

public class Main {
  public static void main(String[] args) {
    Parent p = new Child(); // Reference of type Parent but points to Child object
    p.printMessage(); // Output: Static method from Child (Method Hiding)
  }
}

20. If a superclass method throws an exception, can the overridden method in the subclass
throw a broader exception? Why or why not?
Answer: No, the overridden method cannot throw a broader exception. It must throw the same
exception type or a subtype of the exception thrown by the overridden method. This is to
maintain compatibility with the superclass.

21. Consider a scenario where a superclass and its subclass both have a method with the same
name and parameters. If an object of the subclass is created and the method is called, which
method will be executedâ€”superclass or subclass?
Answer: The method in the subclass will be executed. This is an example of method overriding,
where the method in the subclass provides a specific implementation that is chosen at runtime
based on the actual type of the object.

22. What is the difference between hiding a method and overriding it? Provide an example.
Answer: Hiding a method (using the static keyword) is not the same as overriding it. Hiding
involves creating a new method with the same name in a subclass, while overriding involves
providing a specific implementation for a method in the superclass. Hiding does not follow
the polymorphic behavior associated with method overriding.

23. Explain the concept of final methods in the context of method overriding.
Answer: If a method in the superclass is marked as final, it cannot be overridden in any
subclass. This ensures that the method's implementation in the superclass is not modified
by any subclass. A final method in the superclass cannot be overridden in any subclass.
The final keyword explicitly indicates that the method's implementation is not allowed
to be changed.

24. Consider a scenario where a superclass has a private method and a public method with
the same name. Can the subclass override the public method?
Answer: No, the subclass cannot override the private method. Method overriding requires
the overridden method to be visible to the subclass, and private methods are not inherited
by subclasses. The public method in the superclass is a different method with the same name,
and the subclass can provide its own implementation for it.

25. What is the role of unchecked exception in method overriding?
Answer: Unchecked Exceptions (RuntimeExceptions):
Overriding methods in the subclass can throw unchecked exceptions (runtime exceptions) even
if the superclass method does not declare them. There are no restrictions on unchecked
exceptions.

class Superclass {
    void method() {}
}

class Subclass extends Superclass {
    // Valid override with unchecked exception
    void method() throws NullPointerException {}
}









