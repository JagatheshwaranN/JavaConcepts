Questions
=========
1. What is method overriding in Java?
Answer: Method overriding in Java allows a subclass to provide a specific implementation for
a method that is already defined in its superclass.

2. What are the rules for method overriding in Java?
Answer:
1. The method in the subclass must have the same signature as the method in the superclass.
2. The method in the subclass must have the same return type (or a subtype).
3. The access level of the overriding method cannot be more restrictive than the overridden method.
4. The overriding method cannot throw broader exceptions than the overridden method.

3. Can the overridden method be private or static?
Answer: No, the overridden method cannot be private or static. It must be visible to the subclass
and not marked as static.

4. Why is the @Override annotation used for in method overriding?
Answer: The @Override annotation is used to indicate that a method in a subclass is intended to
override a method in its superclass. It helps the compiler catch errors if the method does not
actually override a method in the superclass.

5. Explain the difference between method overloading and method overriding.
Answer: Method overloading involves defining multiple methods in the same class with the same
name but different parameter lists. Method overriding involves providing a specific implementation
for a method that is already defined in a superclass.

6. What is the significance of the super keyword in method overriding?
Answer: The super keyword is used to call the overridden method from the superclass. It is
particularly useful when the subclass wants to extend or modify the behavior of the superclass
method.

7. Can a subclass override a private method in its superclass?
Answer: No, a subclass cannot override a private method in its superclass because private methods
are not visible to subclasses.

8. How does method overriding support polymorphism in Java?
Answer: Method overriding allows different classes to provide a specific implementation of a method
defined in a common superclass. This enables polymorphic behavior, where objects of different classes
can be treated as objects of a common superclass.

9. What is covariant return type in method overriding?
Answer: Covariant return type allows a subclass method to have a return type that is a subtype of
the return type of the overridden method in the superclass. This feature was introduced in Java 5.
Covariant return types only apply to non-primitive types.

10. Explain the concept of dynamic method dispatch in method overriding.
Answer: Dynamic method dispatch refers to the process where the appropriate overridden method is
called at runtime, based on the actual type of the object rather than the reference type. It is a
key feature that enables polymorphism in Java.

11. What are the conditions required for method overriding?
Answer: Same method name, inheritance hierarchy, non-static methods, not private methods.

12. Can you override a static method? Why or why not?
Answer: No, static methods are bound at compile time.

Method Overriding vs. Static Binding:
=====================================
Method Overriding: Relies on dynamic binding. This means the specific method to be called is
determined at runtime based on the actual object type. It's a core concept of polymorphism,
allowing subclasses to provide specialized implementations of inherited methods.

Static Binding: In contrast, static methods are resolved at compile time. The compiler
determines the exact method to call based on the declared type of the reference variable, not
the actual object. This is because static methods belong to the class itself, not to instances.

Reasons Why Overriding Static Methods is Not Allowed:
=====================================================
Compile-time Resolution: Since static methods are resolved at compile time, there's no chance
for runtime polymorphism to occur. The compiler already knows which static method to call based
on the reference type.

No Inheritance for Static Methods: Static methods are not inherited by subclasses in the traditional
sense. They are associated with the class itself and can be accessed directly using the class name.

Logic of Static Methods: Static methods are often used for utility functions or class-level operations
that don't depend on specific object states. Overriding wouldn't make sense in this context.

13. What happens if you change the return type of the overriding method?
Answer: Not allowed, return type must be same or covariant.

14. Can you override private methods? Explain.
Answer: No, private methods are not inherited

15. How can you call the superclass version of the overridden method from the subclass?
Answer: Using the super keyword. The super() keyword is used to invoke the overridden method in
the superclass. It is particularly useful when the subclass wants to extend or modify the behavior
of the superclass method but still wants to execute the overridden method's functionality.

16. What are the access modifiers' behavior during method overriding? / Can you override a method
and change its access level (e.g., from protected to private) in the subclass?
Answer: No, the access level of the overriding method cannot be more restrictive than the overridden
method. In other words, you cannot reduce the visibility of the method in the subclass.

17. Can you throw a checked exception in the overriding method that wasn't declared in
the superclass method?
Answer: No, only allowed to throw unchecked exceptions or the same or narrower checked exceptions.

18. Explain the concept of method overriding in the context of the Object class in Java?
Answer: E.g., equals(), hashCode(), toString() methods.

19. What is Method Hiding?
Answer: While you can't override static methods, you can create a method in the subclass with
the same name and signature as a static method in the superclass. This results in method hiding.
When you call the method using a reference variable of the subclass, the subclass method will
be invoked, effectively hiding the superclass static method.

class Parent {
  public static void printMessage() {
    System.out.println("Static method from Parent");
  }
}

class Child extends Parent {
  // This hides the static method from Parent
  public static void printMessage() {
    System.out.println("Static method from Child");
  }
}

public class Main {
  public static void main(String[] args) {
    Parent p = new Child(); // Reference of type Parent but points to Child object
    p.printMessage(); // Output: Static method from Child (Method Hiding)
  }
}

20. If a superclass method throws an exception, can the overridden method in the subclass
throw a broader exception? Why or why not?
Answer: No, the overridden method cannot throw a broader exception. It must throw the same
exception type or a subtype of the exception thrown by the overridden method. This is to
maintain compatibility with the superclass.

21. Consider a scenario where a superclass and its subclass both have a method with the same
name and parameters. If an object of the subclass is created and the method is called, which
method will be executedâ€”superclass or subclass?
Answer: The method in the subclass will be executed. This is an example of method overriding,
where the method in the subclass provides a specific implementation that is chosen at runtime
based on the actual type of the object.

22. What is the difference between hiding a method and overriding it? Provide an example.
Answer: Hiding a method (using the static keyword) is not the same as overriding it. Hiding
involves creating a new method with the same name in a subclass, while overriding involves
providing a specific implementation for a method in the superclass. Hiding does not follow
the polymorphic behavior associated with method overriding.

23. Explain the concept of final methods in the context of method overriding.
Answer: If a method in the superclass is marked as final, it cannot be overridden in any
subclass. This ensures that the method's implementation in the superclass is not modified
by any subclass. A final method in the superclass cannot be overridden in any subclass.
The final keyword explicitly indicates that the method's implementation is not allowed
to be changed.

24. Consider a scenario where a superclass has a private method and a public method with
the same name. Can the subclass override the public method?
Answer: No, the subclass cannot override the private method. Method overriding requires
the overridden method to be visible to the subclass, and private methods are not inherited
by subclasses. The public method in the superclass is a different method with the same name,
and the subclass can provide its own implementation for it.

25. What is the role of unchecked exception in method overriding?
Answer: Unchecked Exceptions (RuntimeExceptions):
Overriding methods in the subclass can throw unchecked exceptions (runtime exceptions) even
if the superclass method does not declare them. There are no restrictions on unchecked
exceptions.

class Superclass {
    void method() {}
}

class Subclass extends Superclass {
    // Valid override with unchecked exception
    void method() throws NullPointerException {}
}

26. Discuss the scenarios in which the super keyword is necessary and beneficial during
method overriding. Provide examples to illustrate your points?
Answer: The super keyword in Java is used to refer to the superclass or parent class. It
becomes necessary and beneficial during method overriding in various scenarios:

Calling Overridden Method:
==========================
When a subclass overrides a method from its superclass, using the super keyword allows the
subclass to explicitly call the overridden method of the superclass. This is useful when
you want to extend the behavior of the superclass method in the subclass while still
utilizing the functionality of the superclass method.

class Superclass {
    void display() {
        System.out.println("Superclass display method");
    }
}

class Subclass extends Superclass {
    @Override
    void display() {
        super.display(); // Calls the overridden method in the superclass
        System.out.println("Subclass display method");
    }
}

public class Main {
    public static void main(String[] args) {
        Subclass obj = new Subclass();
        obj.display();
    }
}
Output:
Superclass display method
Subclass display method

Accessing Superclass Members:
=============================
In the subclass, if a member variable or method is shadowed by a member in the subclass
with the same name, you can use super to access the member of the superclass.
class Superclass {
    String message = "Hello from Superclass";

    void display() {
        System.out.println(message);
    }
}

class Subclass extends Superclass {
    String message = "Hello from Subclass";

    @Override
    void display() {
        System.out.println(super.message); // Accessing superclass member variable
        super.display(); // Accessing superclass method
        System.out.println(message);
    }
}

public class Main {
    public static void main(String[] args) {
        Subclass obj = new Subclass();
        obj.display();
    }
}
Output:
Hello from Superclass
Hello from Superclass
Hello from Subclass

Invoking Superclass Constructor:
================================
When a subclass constructor is called, it automatically invokes the default constructor
of the superclass. However, if the superclass has parameterized constructors, you can
use super to explicitly call a specific constructor of the superclass.

class Superclass {
    int value;

    Superclass(int value) {
        this.value = value;
    }
}

class Subclass extends Superclass {
    Subclass(int value, int additionalValue) {
        super(value); // Invoking the superclass constructor
        this.value += additionalValue;
    }

    void display() {
        System.out.println("Value in Subclass: " + value);
    }
}

public class Main {
    public static void main(String[] args) {
        Subclass obj = new Subclass(5, 10);
        obj.display();
    }
}
Output:
Value in Subclass: 15

27. In a scenario where a class implements multiple interfaces, each with a method of the
same name but different parameter lists, how can method overriding be achieved, and what
challenges might arise?
interface Interface1 {
  void doSomething(String message);
}

interface Interface2 {
  void doSomething(int number);
}

class MyClass implements Interface1, Interface2 {

  @Override
  public void doSomething(String message) {
    System.out.println("Processing message: " + message);
  }

  @Override
  public void doSomething(int number) {
    System.out.println("Processing number: " + number);
  }
}

Explanation:
============
Interfaces: Two interfaces, Interface1 and Interface2, define a method named doSomething with
different parameter lists (String and int respectively).
Class Implementation: MyClass implements both interfaces.
Method Overriding: The class provides separate implementations for each doSomething method
using the @Override annotation. This ensures the methods from the interfaces are overridden.

Challenges:
===========
No ambiguity: Since the methods have different parameter lists, the compiler can clearly
identify which method to call based on the provided arguments. There's no conflict during
overriding.

Clarity: Explicit method names with different parameter lists make the code easier to
understand and maintain.

28. Consider a situation where a class extends another class and implements an interface, both
of which have a method with the same name. Discuss the resolution of method invocation and how
the compiler and runtime determine which method is called?

public class Demo8 {

    public static void main(String[] args) throws IOException {
        NonBase nonBase = new NonBase();
        nonBase.display();
        nonBase.display(5);
        nonBase.show();
    }

    static class Base {
        public void display(){
            System.out.println("Base Display");
        }

        public void show(){
            System.out.println("Base Show");
        }
    }

    static class NonBase extends Base implements BAC{

        @Override
        public void display(){
            System.out.println("NonBase Display");
        }
        @Override
        public void display(int value) {
            System.out.println(value);
        }

        @Override
        public void show(){
            System.out.println("NonBase Show");
        }
    }
}

interface BAC {
    void display(int value);

    void show();
}

1. Method in the Derived Class Takes Precedence: If a method is defined in the class
itself (either directly or through inheritance), it takes precedence over methods with
the same signature in interfaces.

2. If Ambiguity Exists in Interfaces: If the same method is present in multiple interfaces
implemented by the class, the class must provide its own implementation, resolving the
ambiguity. If the class doesn't provide an implementation, a compilation error occurs.

Key Points:
===========
The compiler prioritizes methods in the current class during method lookup.
Methods are distinguished based on their parameter lists, allowing for unique implementations.
This approach enables polymorphism, where the appropriate method is invoked based on the
arguments provided at runtime.

29. Explain the concept of the "Bridge Method" in the context of method overriding,
particularly when dealing with generics. Provide an example to demonstrate how bridge methods
are generated and their significance?
Answer:  In Java, bridge methods are a concept introduced to ensure type safety when
dealing with generics and method overriding. They are automatically generated by the
compiler to maintain compatibility with code written in versions of Java prior to the
introduction of generics (Java 5 and earlier).

When a class extends or implements a generic type and overrides a method with a generic
signature, the bridge method is introduced to ensure that the type safety is maintained
during runtime. This is necessary because generics in Java use type erasure, meaning
that the actual type information is erased during compilation, and the JVM deals with
raw types.

In Java, bridge methods come into play when dealing with generics and method overriding.
Here's a breakdown of the concept:

Bridge Methods:
===============
Purpose: Bridge methods are synthetic methods created by the Java compiler to ensure
compatibility between generic types and method overriding mechanisms.

Scenario: When a subclass inherits from a generic class and provides a more specific
implementation for a method with a generic type parameter, the compiler might generate
a bridge method.

Reason for Bridge Methods:
==========================
Type Erasure: During compilation, generic type information is erased. This means that
methods with different generic type parameters might have the same signature after erasure.

Example: Consider a generic class Node<T> with a method setData(T data).

A subclass MyNode extends Node<Integer> and overrides setData(T data) with setData(Integer data).

After erasure, both methods become setData(Object data).

Challenge:
==========
Without bridge methods, the compiler wouldn't recognize MyNode.setData(Integer) as an
override because the erased signatures are identical. This could lead to unexpected
behavior and potential runtime errors.

Bridge Method in Action:
========================
class Node<T> {
  public void setData(T data) {
    System.out.println("Setting data in Node: " + data);
  }
}

class MyNode extends Node<Integer> {
  @Override
  public void setData(Integer data) {
    System.out.println("Setting data in MyNode: " + data);
  }
}

Explanation:
============
The compiler recognizes that MyNode.setData(Integer) should override Node.setData(T).
To bridge the gap between the generic and specific method, the compiler creates a
bridge method:
// Bridge method generated by the compiler
public void setData(Object data) {
  setData((Integer) data); // Cast to the specific type
}

Significance:
=============
Bridge methods ensure that method overriding works correctly even with generics and
type erasure. They maintain type safety by casting the argument to the specific type
expected by the subclass method.

Key Points:
===========
Bridge methods are invisible to the programmer and are not explicitly called in the code.
They are essential for maintaining backward compatibility and ensuring proper polymorphism
with generics.

30. Discuss the impact of covariant return types on method overriding. Provide insights
into how it contributes to code flexibility and potential challenges it may introduce?
Answer: The impact of covariant return types on method overriding includes:

Code Flexibility: Covariant return types allow developers to make their code more expressive
and flexible by returning a more specific type in the overridden method. This is particularly
useful when working with subclasses that specialize or refine the behavior of their superclass.

Enhanced Readability: Covariant return types improve code readability as developers can
clearly see the return type of the overridden method in the subclass without needing to
cast the result.

While covariant return types offer several advantages, there are a few considerations and
potential challenges:

Compatibility: Covariant return types are only available in Java 5 and later versions. If you
need to maintain compatibility with older Java versions, this feature might not be available.

Method Signature: When overriding a method with a covariant return type, it's essential to
ensure that the method signature (including the method name and parameters) remains the same.
Otherwise, it would be considered as a new method in the subclass.

Potential for Confusion: While covariant return types can improve expressiveness, misuse or
overuse might lead to confusion. Developers should use them judiciously and consider the
overall design of their classes and interfaces.

Potential for Type Casting: Although the compiler ensures type safety, explicit casting might
be needed when assigning the return value to a superclass variable.

Animal animal = new Dog();
Animal babyAnimal = animal.getBaby(); // Needs casting for clarity

// Explicit cast to access specific methods of Puppy
Puppy puppy = (Puppy) babyAnimal;
puppy.playFetch();

Runtime Class Checks: In certain scenarios, runtime checks might be necessary to determine the
actual type of the returned object before using subclass-specific methods.

Key Points:
===========
Covariant return types offer greater flexibility in method overriding by allowing subclasses
to return more specific types. This improves code clarity and type safety but might introduce
the need for casting and runtime checks in specific situations.


