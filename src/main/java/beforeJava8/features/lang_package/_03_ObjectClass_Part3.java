package beforeJava8.features.lang_package;

public class _03_ObjectClass_Part3 {

    public static void main(String[] args) {

        /*
            hashCode()
            ==========
            For every object a unique number generated by JVM which is called as HashCode.
            HashCode won't represent the address of the object. JVM will use hashCode while
            saving object into Hashing related data structures like hashtable, hashmap and
            hashset, etc.

            The main advantage of saving the object based on the hashCode is search operation
            will become easy. (The most powerful search algorithm up to date is Hashing).

            If you are given a chance to the object class hashCode() method it will generate
            the hashCode based on the address of the object. It doesn't mean the hashCode
            represents the address. Based on our requirement, we can override the hashCode()
            in our class to generate our own hashCode.

            Overriding the hashCode() method is said to be proper if and only if for every
            object we have to generate a unique number as hashCode.

            class Student {
                public int hashCode () {
                    return 100;
                }
            }
            This is the improper way of overriding the hashCode() method because for all student
            objects we are generating the same number as hashCode.

            class Student {
                public int hashCode () {
                    return rollno;
                }
            }
            This is the proper way of overriding the hashCode() method because we are generating
            the unique number as hashCode for every object.
        */

        /*
            toString() vs hashCode()
            ========================
            1.	If we are given the chance to object class toString() method, then it will
                internally call hashCode() method.
            2.	If we are overriding the toString() method, then our toString() method may not
                call hashCode() method.
        */

        TestDemo1 testDemo1 = new TestDemo1(5);
        System.out.println(testDemo1);

        HashCodeDemo hashCodeDemo = new HashCodeDemo(5);
        System.out.println(hashCodeDemo);

        StringHashCodeDemo stringHashCodeDemo = new StringHashCodeDemo(5);
        System.out.println(stringHashCodeDemo);
    }
}

class TestDemo1 {

    int i;
    TestDemo1(int i){
        this.i = i;
    }
}

class HashCodeDemo {

    int i;
    HashCodeDemo(int i){
        this.i = i;
    }

    public int hashCode(){
        return i;
    }
}

class StringHashCodeDemo {

    int i;
    StringHashCodeDemo(int i){
        this.i = i;
    }

    public String toString(){
        return i+"";
    }

    public int hashCode(){
        return i;
    }
}