package beforeJava8.features.serialization;

import java.io.*;

public class _05_Serialization_Inheritance {

    public static void main(String[] args) {

        /*
             Serialization wrt Inheritance
             =============================
        */
        /*
            Case 1: Parent Implements Serializable
            ======================================
            Even though child class doesn't implement serializable. We can serialize child class
            object if parent class implements serializable Interface. i.e., Serializable nature
            is inherited from parent to child. Hence, if parent is serializable then by default
            every child is serializable.

            In the below example, even though Cars class doesn't implement serializable, we can
            serialize Cars class because its parent Vehicle class implements Serializable.

            Note:
            =====
            Object class doesn't implement Serializable Interface.
        */
        SerializeDemo.serializeInheritanceDemo();
        /*
            Case 2: Child Implements Serializable
            =====================================
            Even though, Parent class doesn't implement Serializable, we can serialize child class
            object if child class implements Serializable interface. i.e., to serialize child class
            object, parent class need not be serializable.

            At the time of serialization, JVM will check is any variable inheriting from
            non-serializable parent or not. If any variable inheriting from non-serializable parent,
            then JVM ignores the original value and save the default value to the file.

            At the time of deserialization, JVM will check is any variable inheriting from
            non-serializable parent or not. If any variable inheriting from non-serializable parent,
            then JVM will execute instance control flow in every non-serializable parent and share
            its instance variable to the current object.

            While executing the instance control flow of non-serializable parent, JVM will always
            call no argument constructor. Hence, every non-serializable class should compulsorily
            contain no argument constructor. It may be default constructor generated by JVM or
            customized constructor provided by the programmer. Otherwise, we will get the runtime
            exception saying InvalidClassException.
        */
        SerializeDemo1.serializeInheritanceDemo1();
    }
}

class Vehicle implements Serializable {

    String vehicleType = "4 wheeler";
}

class Cars extends Vehicle {

    String carType = "SUV";
}

class SerializeDemo {

    public static void serializeInheritanceDemo(){

        Cars cars = new Cars();
        System.out.println(cars.vehicleType);
        System.out.println(cars.carType);

        try{
            FileOutputStream fileOutputStream = new FileOutputStream("vehicle.txt");
            ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream);
            outputStream.writeObject(cars);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        Cars cars1;
        try{
            FileInputStream fileInputStream = new FileInputStream("vehicle.txt");
            ObjectInputStream inputStream = new ObjectInputStream(fileInputStream);
            cars1 = (Cars) inputStream.readObject();
        } catch (IOException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        System.out.println(cars1.vehicleType);
        System.out.println(cars1.carType);
    }

}

class Vehicle1 {

    String vehicleType = "4 wheeler";
}

class Car1 extends Vehicle1 implements Serializable {

    String carType = "SUV";
}

class SerializeDemo1 {

    public static void serializeInheritanceDemo1(){

        System.out.println("Before Serialization");
        Car1 car = new Car1();
        car.vehicleType = "10 seater";
        car.carType = "XUV";
        System.out.println(car.vehicleType);
        System.out.println(car.carType);

        try{
            FileOutputStream fileOutputStream = new FileOutputStream("vehicle1.txt");
            ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream);
            outputStream.writeObject(car);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        System.out.println("After Serialization");
        Car1 car1;
        try{
            FileInputStream fileInputStream = new FileInputStream("vehicle1.txt");
            ObjectInputStream inputStream = new ObjectInputStream(fileInputStream);
            car1 = (Car1) inputStream.readObject();
        } catch (IOException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        System.out.println(car1.vehicleType);
        System.out.println(car1.carType);
    }

}