package beforeJava8.features.serialization;

import java.io.*;

public class _07_SerialVersionUID {

    public static void main(String[] args) {

        /*
            SerialVersionUID
            ================
            In serialization, both sender and receiver need not be same person, need not use same
            machine, and need not be from the same location. The persons may be different, locations
            may be different and machines may be different.

            In serialization, both sender and receiver should have .class at the beginning only.
            Just state of object is travelling from sender to receiver.

            At the time of serialization, with every object, sender side JVM will save a unique
            identifier. JVM is responsible to generate this unique identifier based on the .class
            file. At the time of deserialization, receiver side JVM will compare unique identifier
            associated with object, with local class unique identifier, if both are matched then
            only deserialization will be performed. Otherwise, we will get the runtime exception
            saying InvalidClassException. This unique identifier is nothing but SerialVersionUID.

            Problems of depending on Default SerialVersionUID generated by JVM
            ==================================================================
            Both Sender and Receiver should use SUID with respect to vendor, platform and version.
            Otherwise, the receiver unable to serialize because of different SerialversionUIDs.

            Both sender and receiver should use same .class file version. After serialization if
            there is any change in the .class file at receiver side. Then receiver couldn't
            deserialize the serialized object.

            To generate the SerialVersionUID internally, JVM may use complex algorithm which may
            create performance problem.

            We can solve the above problems by configuring our own SerialVersionUID. We can configure
            our own SerialVersionUID as follows,

            private static final long serialversionUID = 1L;
        */
            Sender.senderDemo();
            Receiver.receiverDemo();
        /*
            In the below programs, after serialization, if we perform any change to the .class file
            at receiver side we won't get any problem at the time of deserialization.

            In this case, sender and receiver are not required to maintain the same JVM versions.

            Note:
            =====
            Some IDEs prompt programmer to enter the SerialVersionUID explicitly. Some IDEs may
            generate the SerialVersionUID automatically.
        */
    }

}

class Mobile implements Serializable {

    private static final long serialversionUID = 1L;

    int i = 10;

    int j = 20;
}

class Sender {

    public static void senderDemo(){

        Mobile mobile = new Mobile();
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("suid.txt");
            ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream);
            outputStream.writeObject(mobile);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}


class Receiver {

    public static void receiverDemo(){

        Mobile mobile1;
        try {
            FileInputStream fileInputStream = new FileInputStream("suid.txt");
            ObjectInputStream inputStream = new ObjectInputStream(fileInputStream);
            mobile1 = (Mobile) inputStream.readObject();
            System.out.println(mobile1.i);
            System.out.println(mobile1.j);
        } catch (IOException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

}