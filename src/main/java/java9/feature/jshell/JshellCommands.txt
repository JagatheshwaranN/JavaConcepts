Introduction
============
JShell is Javaâ€™s REPL (Read, Evaluate, Print, and Loop) tool. JShell is also known as interactive console.
By using this tool we can execute java code snippets and we can get the immediate results. For beginners, it is very good to start programming in fun way.
By using this JShell, we can test and execute java expressions, statements, methods, classes, etc. It is useful for testing small code snippets very quickly, which can be plugged into our main coding based on our requirement.
It is not new thing in Java. It is already there in other programming languages like Python, Swift, Lisp, Scala, and Ruby, etc.

Limitations
===========
1.	Not designed for Main coding, we can use just to test small coding snippets, which can be used in our Main Coding.
2.	Not replacement for IDEs like Eclipse, NetBeans, etc.
3.	Not impressive feature. Other programming languages like Python, Swift, Lisp, Scala, and Ruby already have this REPL tool.

C:\Users\Jagatheshwaran N>java -version
java version "17.0.3.1" 2022-04-22 LTS
Java(TM) SE Runtime Environment (build 17.0.3.1+2-LTS-6)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.3.1+2-LTS-6, mixed mode, sharing)

================================================================================
Start and Stop Jshell in normal mode
====================================
C:\Users\Jagatheshwaran N>jshell
|  Welcome to JShell -- Version 17.0.3.1
|  For an introduction type: /help intro

jshell> System.out.println("Hello JShell");
Hello JShell

jshell> 10+20
$2 ==> 30

jshell> /exit
|  Goodbye

C:\Users\Jagatheshwaran N>
================================================================================
Start and Stop Jshell in verbose mode
=====================================
C:\Users\Jagatheshwaran N>jshell -v
|  Welcome to JShell -- Version 17.0.3.1
|  For an introduction type: /help intro

jshell> 10+20
$1 ==> 30
|  created scratch variable $1 : int

jshell> Math.sqrt(5)
$2 ==> 2.23606797749979
|  created scratch variable $2 : double

jshell> Math.max(10, 20)
$3 ==> 20
|  created scratch variable $3 : int

jshell> Math.random();
$4 ==> 0.6433571886187469
|  created scratch variable $4 : double
================================================================================
Jshell Default Packages
=======================
jshell> /imports
|    import java.io.*
|    import java.math.*
|    import java.net.*
|    import java.nio.file.*
|    import java.util.*
|    import java.util.concurrent.*
|    import java.util.function.*
|    import java.util.prefs.*
|    import java.util.regex.*
|    import java.util.stream.*
================================================================================
Jshell Compiler Check
=====================
jshell> Systm.out.println("Hello");
|  Error:
|  package Systm does not exist
|  Systm.out.println("Hello");
|  ^-------^
================================================================================
ArrayList Operations
====================
jshell> ArrayList<String> al = new ArrayList<String>();
al ==> []
|  created variable al : ArrayList<String>

jshell> al.add("Alex"); al.add("John"); al.add("Jenni");
$6 ==> true
|  created scratch variable $6 : boolean
$7 ==> true
|  created scratch variable $7 : boolean
$8 ==> true
|  created scratch variable $8 : boolean

jshell> al
al ==> [Alex, John, Jenni]
|  value of al : ArrayList<String>
================================================================================
IO Operations
=============
jshell> PrintWriter writer = new PrintWriter("sample1.txt");
writer ==> java.io.PrintWriter@736e9adb
|  created variable writer : PrintWriter

jshell> writer.print("Hello from Jshell");

jshell> writer.flush();
================================================================================
Getting Help From Jshell
========================
To know introduction of Jshell
==============================
jshell> /help intro
|
|                                   intro
|                                   =====
|
|  The jshell tool allows you to execute Java code, getting immediate results.
|  You can enter a Java definition (variable, method, class, etc), like:  int x = 8
|  or a Java expression, like:  x + x
|  or a Java statement or import.
|  These little chunks of Java code are called 'snippets'.
|
|  There are also the jshell tool commands that allow you to understand and
|  control what you are doing, like:  /list
|
|  For a list of commands: /help
================================================================================
To know the list of commands
============================
jshell> /help
|  Type a Java language expression, statement, or declaration.
|  Or type one of the following commands:
|  /list [<name or id>|-all|-start]
|       list the source you have typed
|  /edit <name or id>
|       edit a source entry
|  /drop <name or id>
|       delete a source entry
|  /save [-all|-history|-start] <file>
|       Save snippet source to a file
|  /open <file>
|       open a file as source input
|  /vars [<name or id>|-all|-start]
|       list the declared variables and their values
|  /methods [<name or id>|-all|-start]
|       list the declared methods and their signatures
|  /types [<name or id>|-all|-start]
|       list the type declarations
|  /imports
|       list the imported items
|  /exit [<integer-expression-snippet>]
|       exit the jshell tool
|  /env [-class-path <path>] [-module-path <path>] [-add-modules <modules>] ...
|       view or change the evaluation context
|  /reset [-class-path <path>] [-module-path <path>] [-add-modules <modules>]...
|       reset the jshell tool
|  /reload [-restore] [-quiet] [-class-path <path>] [-module-path <path>]...
|       reset and replay relevant history -- current or previous (-restore)
|  /history [-all]
|       history of what you have typed
|  /help [<command>|<subject>]
|       get information about using the jshell tool
|  /set editor|start|feedback|mode|prompt|truncation|format ...
|       set configuration information
|  /? [<command>|<subject>]
|       get information about using the jshell tool
|  /!
|       rerun last snippet -- see /help rerun
|  /<id>
|       rerun snippets by ID or ID range -- see /help rerun
|  /-<n>
|       rerun n-th previous snippet -- see /help rerun
|
|  For more information type '/help' followed by the name of a
|  command or a subject.
|  For example '/help /list' or '/help intro'.
|
|  Subjects:
|
|  intro
|       an introduction to the jshell tool
|  keys
|       a description of readline-like input editing
|  id
|       a description of snippet IDs and how use them
|  shortcuts
|       a description of keystrokes for snippet and command completion,
|       information access, and automatic code generation
|  context
|       a description of the evaluation context options for /env /reload and /reset
|  rerun
|       a description of ways to re-evaluate previously entered snippets
================================================================================
To know the information about a particular command
==================================================
jshell> /help exit
|
|                                   /exit
|                                   =====
|
|  Leave the jshell tool.  No work is saved.
|  Save any work before using this command
|
|  /exit
|       Leave the jshell tool.  The exit status is zero
|
|  /exit <integer-expression-snippet>
|       Evaluate the snippet.  If the snippet fails or is not an integer expression,
|       display the error.  Otherwise leave the jshell tool with the
|       value of the expression as the exit status

To get just names of all commands without description
=====================================================
jshell> /
/!          /?          /drop       /edit       /env        /exit       /help       /history    /imports    /list       /methods    /open       /reload     /reset
/save       /set        /types      /vars

<press tab again to see synopsis>
================================================================================
To know the list of options available for a particular command
==============================================================
jshell> /list -
-all       -history   -start
================================================================================
To know list of options available with JShell
=============================================
C:\Users>jshell --help
Usage:   jshell <option>... <load-file>...
where possible options include:
    --class-path <path>   Specify where to find user class files
    --module-path <path>  Specify where to find application modules
    --add-modules <module>(,<module>)*
                          Specify modules to resolve, or all modules on the
                            module path if <module> is ALL-MODULE-PATHs
    --enable-preview      Allow code to depend on preview features of this release
    --startup <file>      One run replacement for the startup definitions
    --no-startup          Do not run the startup definitions
    --feedback <mode>     Specify the initial feedback mode. The mode may be
                            predefined (silent, concise, normal, or verbose) or
                            previously user-defined
    -q                    Quiet feedback.  Same as: --feedback concise
    -s                    Really quiet feedback.  Same as: --feedback silent
    -v                    Verbose feedback.  Same as: --feedback verbose
    -J<flag>              Pass <flag> directly to the runtime system.
                            Use one -J for each runtime flag or flag argument
    -R<flag>              Pass <flag> to the remote runtime system.
                            Use one -R for each remote flag or flag argument
    -C<flag>              Pass <flag> to the compiler.
                            Use one -C for each compiler flag or flag argument
    --version             Print version information and exit
    --show-version        Print version information and continue
    --help, -?, -h        Print this synopsis of standard options and exit
    --help-extra, -X      Print help on non-standard options and exit

A file argument may be a file name, or one of the predefined file names: DEFAULT,
PRINTING, or JAVASE.
A load-file may also be "-" to indicate standard input, without interactive I/O.

For more information on the evaluation context options (--class-path,
--module-path, and --add-modules) see:
        /help context

A path lists the directories and archives to search. For Windows, use a
semicolon (;) to separate items in the path. On other platforms, use a
colon (:) to separate items.
================================================================================
To know the version of Jshell
=============================
C:\Users>jshell -version
jshell 17.0.3.1
================================================================================
To get the details of the startup snippets
==========================================
jshell> /list -start

  s1 : import java.io.*;
  s2 : import java.math.*;
  s3 : import java.net.*;
  s4 : import java.nio.file.*;
  s5 : import java.util.*;
  s6 : import java.util.concurrent.*;
  s7 : import java.util.function.*;
  s8 : import java.util.prefs.*;
  s9 : import java.util.regex.*;
 s10 : import java.util.stream.*;
 ================================================================================
To get the details of the active snippets
=========================================
 jshell> /list

   1 : System.out.println("Hello");
   2 : 10+20
================================================================================
To get the details of the all snippets
======================================
jshell> /list -all

  s1 : import java.io.*;
  s2 : import java.math.*;
  s3 : import java.net.*;
  s4 : import java.nio.file.*;
  s5 : import java.util.*;
  s6 : import java.util.concurrent.*;
  s7 : import java.util.function.*;
  s8 : import java.util.prefs.*;
  s9 : import java.util.regex.*;
 s10 : import java.util.stream.*;
   1 : System.out.println("Hello");
   2 : 10+20
   3 : String s = "Jshell";
================================================================================
To list the snippets by Id / Name
=================================
jshell> /list 1

   1 : System.out.println("Hello");

jshell> /list s1

  s1 : import java.io.*;
  
jshell> /list s

   3 : String s = "Jshell";
================================================================================
To drop the snippets by Id / Name
=================================
jshell> /list

   1 : System.out.println("Hello Jshell");
   2 : int x = 10;
   3 : x+20
   
jshell> /drop 1

jshell> /list

   2 : int x = 10;
   3 : x+20

jshell> /drop x
|  dropped variable x
================================================================================
Working with Jshell Variables
=============================
Explicit variables
==================
The variables which are created by the Programmer explicitly based on our requirement is called as Explicit Variables.

jshell> int x = 10;
x ==> 10
|  created variable x : int

Implicit variables
==================
Sometimes, Jshell itself create variables implicitly to hold temporary values, such type of variables are called as Implicit variables.

jshell> 10+30
$5 ==> 40
|  created scratch variable $5 : int

If we are trying to declare a variable with the same name which is already available then old variable will be replaced with new variable i.e., in Jshell, variable overriding is possible. 

jshell> int y = 20;
y ==> 20
|  created variable y : int

jshell> String y = "Hello";
y ==> "Hello"
|  replaced variable y : String
|    update overwrote variable y : int

While declaring the variables compulsory the types must be matched, otherwise we will get compile time error.

jshell> String s = true;
|  Error:
|  incompatible types: boolean cannot be converted to java.lang.String
|  String s = true;
|             ^--^
================================================================================
To get the details of the active variables
==========================================
jshell> /vars
|    int $3 = 30
|    int x = 10
|    int $5 = 40
|    String y = "Hello"
================================================================================
To get the details of all variables
===================================
jshell> /vars -all
|    int x = (not-active)
|    int $3 = 30
|    int x = 10
|    int $5 = 40
|    int y = (not-active)
|    String y = "Hello"
|    String s = (not-active)
================================================================================
To drop the variable
====================
jshell> /drop y
|  dropped variable y
================================================================================
Print & Printf Difference
=========================
System.out.println(); method return type is void. But System.out.printf(); method return type is PrintStream object.

jshell> System.out.print("Hello");
Hello
jshell> System.out.printf("Hello Jshell");
Hello Jshell
$9 ==> java.io.PrintStream@27f8302d
|  created scratch variable $9 : PrintStream
================================================================================
Working with Jshell Methods
===========================
jshell> public void m1(){}
|  created method m1()

jshell> public void greet(String name){
   ...>     System.out.println("Hello "+name);
   ...> }
|  created method greet(String)

jshell> greet("alex");
Hello alex
================================================================================
In Jshell, there may be chance of having multiple methods with same name but different argument types and such methods are called as overloaded methods.

jshell> public void display()
   ...> {
   ...>     System.out.println("Method From Jshell");
   ...> }
|  created method display()

jshell> display()
Method From Jshell

jshell> public void display(String message)
   ...> {
   ...>     System.out.println("Welcome "+message);
   ...> }
|  created method display(String)

jshell> display("John");
Welcome John
================================================================================
We can list all the methods information by using /methods command.

To get active method details
============================
jshell> /methods
|    void m1()
|    void greet(String)
|    void display()
|    void display(String)

To get the methods details by Name
==================================
jshell> /methods display
|    void display()
|    void display(String)

To get the methods details by Id
================================
jshell> /methods 1
|    void m1()

To get all the methods details
==============================
jshell> /methods -all
|    void m1()
|    void greet(String)
|    void display()
|    void display(String)
================================================================================
If we are trying to declare a method with same signature of already existing method in Jshell, then old method will be overridden with new method (Even though the return types are different) i.e., In Jshell at a time only one method with unique signature is possible.

jshell> public void m1(int i) {}
|  created method m1(int)

jshell> public int m1(int i) {return 10;}
|  replaced method m1(int)
|    update overwrote method m1(int)
================================================================================
"Not Recommended" ==>> In Jshell, we can create more complex methods as well, 

jshell> public void sum(int... x)
   ...> {
   ...>     int total=0;
   ...>     for(int x1:x){
   ...>         total = total+x1;
   ...>     }
   ...>     System.out.println("The Sum : "+total);
   ...> }
|  created method sum(int...)

jshell> sum(10, 20, 30)
The Sum : 60

jshell> sum(10, 20, 30, 40, 50)
The Sum : 150
================================================================================
To drop method by Name
======================
jshell> /drop m1
|  dropped method m1()
|  dropped method m1(int)

To drop method by Id
====================
jshell> /drop 2
|  dropped method greet(String)
================================================================================
Usage of Undeclared Variables and Methods
=========================================
In Jshell, inside method body we can use undeclared variables and methods. But until declaring all dependent variables and methods, we canâ€™t invoke that method.

jshell> public void method1()
   ...> {
   ...>     System.out.println(a);
   ...> }
|  created method method1(), however, it cannot be invoked until variable a is declared

jshell> method1()
|  attempted to call method method1() which cannot be invoked until variable a is declared

jshell> int a = 10;
a ==> 10
|  created variable a : int
|    update modified method method1()

jshell> method1()
10

jshell> public void method2()
   ...> {
   ...>     method3();
   ...> }
|  created method method2(), however, it cannot be invoked until method method3() is declared

jshell> method2()
|  attempted to call method method2() which cannot be invoked until method method3() is declared

jshell> public void method3(){
   ...>     System.out.println("Method3 called from Method2");
   ...> }
|  created method method3()
|    update modified method method2()

jshell> method2()
Method3 called from Method2
================================================================================
Using External Editor with Jshell
=================================
It is every difficult to type lengthy code from Jshell. To overcome this problem, Jshell provides inbuilt editor.

To open the editor in Jshell,
============================= 
jshell> /edit 
The above command will open the default editor window.

To set the external editor as Jshell editor, 
============================================
jshell> /set editor "C:\\Program Files\\Notepad++\\notepad++.exe";
|  Editor set to: C:\Program Files\Notepad++\notepad++.exe ;

The external editor by default available for the current session and once the session is completed, then Jshell default editor only will show. 

To make the external editor as permanent editor in Jshell, 
==========================================================
jshell> /set editor -retain
|  Editor setting retained: C:\Program Files\Notepad++\notepad++.exe ;

The above command will make the external editor as permanent editor in Jshell.

If suppose, we need to switch back to default Jshell editor,
============================================================ 
jshell> /set editor -default
|  Editor set to: -default
================================================================================


